(define-module (bad-cat nfldb cache league)

  ;; *******************************************************************************************************************
  ;; Cache for League data
  ;; Extremely static. Might change yearly.
  ;; *******************************************************************************************************************

  #:use-module (oop goops)

  #:use-module (bad-cat utils)
  #:use-module (bad-cat nfldb)

  #:use-module (bad-cat nfldb cache)
  #:use-module (bad-cat nfldb espn)
  #:use-module (bad-cat nfldb team)
  #:use-module (bad-cat nfldb json)
  #:use-module (bad-cat nfldb serialize)

  #:export (conf->index)
  #:export (div->index)

  #:export (league-retrieve!)
  #:export (league-restore)

  #:export (all-nfl-teams)

  #:export (get-team)
  #:export (get-conf)
  #:export (get-div)

  #:export (set-my-team)
  #:export (my-team)
)

(define-class <league-cache> ()
  (teams          #:init-thunk      make-hash-table
                  #:getter          league.teams
                  #:setter          league.teams!)
  (conferences    #:init-thunk      make-hash-table
                  #:getter          league.conferences
                  #:setter          league.conferences!)
)

(define-method (initialize (l <league-cache>) args)
  (next-method)

  (reset-conference-cache (league.conferences l)))

(define (reset-conference-cache c)
  (let ( (afc (make-hash-table))
         (nfc (make-hash-table)) )
    (hash-set! c 'AFC afc)
    (hash-set! c 'NFC nfc)
    (map (lambda (x)
           (map (lambda (y) (hash-set! x y '()))
                '(NORTH SOUTH EAST WEST)))
         (list afc nfc))))

(define-method (clear-cache (c <league-cache>))
  (slot-set! c 'teams (make-hash-table))
  (slot-set! c 'conferences (make-hash-table)))

;; Leave this as is, as this should only be updated when forced to
;; (define-method (cache-out-of-date? (c <league-cache>)) #f)

(define-method (league-retrieve! (l <league-cache>))
  (clear-cache l)
  (reset-conference-cache (league.conferences l))
  (map (lambda (t) (register-team l t)) (espn-get-teams))
  #t)

(define (espn-get-teams)
  (let ( (json (espn-get-page espn-host-core "v2/sports/football/leagues/nfl/teams?limit=320" port->json-obj)) )
    (let ( (team-urls (map (lambda (x) (json-ref $ref x)) (json-ref items json))) )
      (map slurp-team team-urls))))

(define (slurp-team team-url)
  (let ( (json (espn-get-url team-url port->json-obj)) )
    (let ( (division (lookup-division (json-ref groups.$ref json))) )
      (format #t "slurp-team: division = ~a~%" division)
      (let ( (id (string->number (json-ref id json))) )
        (if (not (get-team id))
          (make-instance <nfl-team>
                         #:id id
                         #:nick (string->symbol (json-ref abbreviation json))
                         #:name (json-ref name json)
                         #:display-name (json-ref displayName json)
                         #:location (json-ref location json)
                         #:color (read-espn-color (json-ref color json))
                         #:alt-color (read-espn-color (json-ref alternateColor json))
                         #:conf (car division)
                         #:div (cdr division)))))))

(define (register-team l t)
  (let ( (teams (league.teams l))
         (conferences (league.conferences l)) )
    (if (hash-ref teams (team.nick t)) (throw 'team-already-registered (team.nick t) t (hash-ref teams t)))
    (hash-set! teams (team.nick t) t)
    (hash-set! teams (team.id t) t)
    (hash-set! (hash-ref conferences (team.conf t))
               (team.div t)
               (cons t (hash-ref (hash-ref conferences (team.conf t)) (team.div t))))))

(define league-cache-file (format #f "~a/league.scm" nfldb-cache-root))

(define-method (cache-persist-store (c <league-cache>))
  (define (write-teams) (write-teams-data-file (hash-map->list _2nd (league.teams c))))
  (format #t "cache-persist-store <league-cache> : synching cache ~a~%" (class-name (class-of c)))
  (with-output-to-file league-cache-file write-teams))

(define-method (league-restore)
  (define (read-objects)
    (define (proc sofar)
      (let ( (next (read)) )
        (if (eof-object? next)
          (reverse sofar)
          (proc (cons next sofar)))))
    (proc '()))
  (if (file-exists? league-cache-file)
    (map (lambda (x) (register-team (league) x))
         (map nfldb-eval (with-input-from-file league-cache-file read-objects)))
    #f))

(define (write-teams-data-file teams)
  (define (write-team t)
    (format #t "~%")
    (write-constructor t (current-output-port))
    (format #t "~%"))
  (define (write-div c d)
    (format #t ";; ~a ~a~%" c d)
    (map write-team (get-div c d))
    (format #t "~%"))
  (format #t " ;; DO NOT EDIT! Generated by sandbox/espn.scm write-teams-module-file~%")
  (format #t " ;; Just a hack for now to keep from having to download static data every time the script is loaded~%")
  (format #t "~%")
  (map (lambda (c)
         (map (lambda (d) (write-div c d))
              '(NORTH SOUTH EAST WEST)))
       '(AFC NFC)))

;;
;; Global FUnctions
;;

(define (conf->index conf)
  (case conf
    ( (afc AFC) 0 )
    ( (nfc NFC) 1 )
    ( else (throw 'invalid-conference conf) )))

(define (div->index div)
  (case div
    ( (east EAST)   0 )
    ( (north NORTH) 1 )
    ( (south SOUTH) 2 )
    ( (west WEST)   3 )
    ( else (throw 'invalid-division div) )))

(define league (make-parameter (make-instance <league-cache>)))

(define (get-team nick) (hash-ref (league.teams (league)) nick))
(define (get-conf c) (apply append (hash-map->list _2nd (hash-ref (league.conferences (league)) c))))
(define (get-div c d)
  (hash-ref (hash-ref (league.conferences (league)) c)  d))

(define (all-nfl-teams)
  (sort (apply append
               (apply append
                      (map (lambda (x) (hash-map->list _2nd x))
                           (hash-map->list _2nd (league.conferences (league))))))
        team-name<?))

(define my-team-param (make-parameter 'PHI))

(define (set-my-team team-name)
  (let ( (team (get-team team-name)) )
    (if team
      (my-team-param (team.nick team))
      (throw 'undefined-team team-name))))

(define (my-team) (get-team (my-team-param)))

